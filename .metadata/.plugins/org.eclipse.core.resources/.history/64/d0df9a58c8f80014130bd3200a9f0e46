// Acquisizione dati da modulo con doppio AD 9628

#include <stdio.h>
#include "xiicps.h"
#include "xparameters.h"
#include "xscugic.h"
#include "xdevcfg.h"
#include "xdmaps.h"
#include "dmaps_header.h"
#include "xqspips.h"
#include "qspips_header.h"
#include "xspips.h"
#include "spips_header.h"
#include "xuartps.h"
#include "uartps_header.h"
#include "sleep.h"

#include "xil_printf.h"

/*
#define XPAR_PS7_I2C_0_DEVICE_ID

int IicPsSelfTestExample; //(u16 DeviceId);

   {
         int Statu;

         print("\r\n Running IicPsSelfTestExample() for ps7_i2c_0... I2C slow control\r\n");

         Statu = IicPsSelfTestExample(XPAR_PS7_I2C_0_DEVICE_ID);

         if (Statu == 0) { print("IicPsSelfTestExample PASSED\r\n"); }
         else { print("IicPsSelfTestExample FAILED\r\n"); }
      }

*/


 //////////////////////////////////////////////////////


   /**
   * @file xiicps_eeprom_polled_example.c
   * This file consists of a polled mode design example which uses the Xilinx PS
   * IIC device and XIicPs driver to exercise the EEPROM.
   *
   * The XIicPs_MasterSendPolled() API is used to transmit the data and
   * XIicPs_MasterRecvPolled() API is used to receive the data.
   *
   * The example is tested with a 2Kb/8Kb serial IIC EEPROM (ST M24C02/M24C08).
   * The WP pin of this EEPROM is hardwired to ground in the HW in which this
   * was tested.
   *
   * The AddressType should be u8 as the address pointer in the on-board
   * EEPROM is 1 bytes.
   *
   /***************************** Include Files *********************************/
 /*
    * The following constants map to the XPAR parameters created in the
    * xparameters.h file. They are defined here such that a user can easily
    * change all the needed parameters in one place.
    */
   #define IIC_DEVICE_ID	XPAR_XIICPS_0_DEVICE_ID
   /*
    * The following constant defines the address of the IIC Slave device on the
    * IIC bus. Note that since the address is only 7 bits, this constant is the
    * address divided by 2.
    */
   #define IIC_SLAVE_ADDR		0x54
   #define IIC_SCLK_RATE		100000
   #define IIC_MUX_ADDRESS 	0x74

   /*
    * The page size determines how much data should be written at a time.
    * The write function should be called with this as a maximum byte count.
    */
   #define PAGE_SIZE		16

   /*
    * The Starting address in the IIC EEPROM on which this test is performed.
    */
   #define EEPROM_START_ADDRESS	128

   /**************************** Type Definitions *******************************/
   /*
    * The AddressType should be u8 as the address pointer in the on-board
    * EEPROM is 1 bytes.
    */
   typedef u8 AddressType;

   int IicPsEepromPolledExample(void);
   int EepromWriteData(u16 ByteCount);
   int MuxInit(void);
   int EepromReadData(u8 *BufferPtr, u16 ByteCount);

   /************************** Variable Definitions *****************************/

   XIicPs IicInstance;		/* The instance of the IIC device. */

   /*
    * Write buffer for writing a page.
    */
   u8 WriteBuffer[sizeof(AddressType) + PAGE_SIZE];
   u8 ReadBuffer[PAGE_SIZE];	/* Read buffer for reading a page. */

   /************************** Function Definitions *****************************/

   /*****************************************************************************/
   /**
   * Main function to call the Iic EEPROM polled example.
   *
   * @param	None.
   *
   * @return	XST_SUCCESS if successful else XST_FAILURE.
   *
   * @note		None.
   *
   ******************************************************************************/
   int main(void)
   {
   	int Status;

   	xil_printf("IIC EEPROM Polled Mode Example Test \r\n");

   	/*
   	 * Run the Iic EEPROM Polled Mode example.
   	 */
   	Status = IicPsEepromPolledExample();
   	if (Status != XST_SUCCESS) {
   		xil_printf("IIC EEPROM Polled Mode Example Test Failed\r\n");
   		return XST_FAILURE;
   	}

   	xil_printf("Successfully ran IIC EEPROM Polled Mode Example Test\r\n");
   	return XST_SUCCESS;
   }

   /*****************************************************************************/
   /**
   * This function writes, reads, and verifies the data to the IIC EEPROM. It
   * does the write as a single page write, performs a buffered read.
   *
   * @param	None.
   *
   * @return	XST_SUCCESS if successful else XST_FAILURE.
   *
   * @note		None.
   *
   ******************************************************************************/
   int IicPsEepromPolledExample(void)
   {
   	u32 Index;
   	int Status;
   	XIicPs_Config *ConfigPtr;	/* Pointer to configuration data */
   	AddressType Address = EEPROM_START_ADDRESS;

   	/*
   	 * Initialize the IIC driver so that it is ready to use.
   	 */
   	ConfigPtr = XIicPs_LookupConfig(IIC_DEVICE_ID);
   	if (ConfigPtr == NULL) {
   		return XST_FAILURE;
   	}

   	Status = XIicPs_CfgInitialize(&IicInstance, ConfigPtr,
   					ConfigPtr->BaseAddress);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Set the IIC serial clock rate.
   	 */
   	XIicPs_SetSClk(&IicInstance, IIC_SCLK_RATE);

   	/*
   	 * Set the channel value in IIC Mux.
   	 */
	    xil_printf("I'm in polled n!!");
   	Status = MuxInit();
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Initialize the data to write and the read buffer.
   	 */
   	if (sizeof(Address) == 1) {
   		WriteBuffer[0] = (u8) (Address);
   	} else {
   		WriteBuffer[0] = (u8) (Address >> 8);
   		WriteBuffer[1] = (u8) (Address);
   		ReadBuffer[Index] = 0;
   	}

   	for (Index = 0; Index < PAGE_SIZE; Index++) {
   		WriteBuffer[sizeof(Address) + Index] = 0xFF;
   		ReadBuffer[Index] = 0;
   	}

   	/*
   	 * Write to the EEPROM.
   	 */
   	Status = EepromWriteData(sizeof(Address) + PAGE_SIZE);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Read from the EEPROM.
   	 */
   	Status = EepromReadData(ReadBuffer, PAGE_SIZE);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Verify the data read against the data written.
   	 */
   	for (Index = 0; Index < PAGE_SIZE; Index++) {
   		if (ReadBuffer[Index] != WriteBuffer[Index + sizeof(Address)]) {
   			return XST_FAILURE;
   		}

   		ReadBuffer[Index] = 0;
   	}

   	/*
   	 * Initialize the data to write and the read buffer.
   	 */
   	if (sizeof(Address) == 1) {
   		WriteBuffer[0] = (u8) (Address);
   	} else {
   		WriteBuffer[0] = (u8) (Address >> 8);
   		WriteBuffer[1] = (u8) (Address);
   		ReadBuffer[Index] = 0;
   	}

   	for (Index = 0; Index < PAGE_SIZE; Index++) {
   		WriteBuffer[sizeof(Address) + Index] = Index + 10;
   		ReadBuffer[Index] = 0;
   	}

   	/*
   	 * Write to the EEPROM.
   	 */
   	Status = EepromWriteData(sizeof(Address) + PAGE_SIZE);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Read from the EEPROM.
   	 */
   	Status = EepromReadData(ReadBuffer, PAGE_SIZE);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Verify the data read against the data written.
   	 */
   	for (Index = 0; Index < PAGE_SIZE; Index++) {
   		if (ReadBuffer[Index] != WriteBuffer[Index + sizeof(Address)]) {
   			return XST_FAILURE;
   		}

   		ReadBuffer[Index] = 0;
   	}

   	return XST_SUCCESS;
   }

   /*****************************************************************************/
   /**
   * This function writes a buffer of data to the IIC serial EEPROM.
   *
   * @param	ByteCount contains the number of bytes in the buffer to be
   *		written.
   *
   * @return	XST_SUCCESS if successful else XST_FAILURE.
   *
   * @note		The Byte count should not exceed the page size of the EEPROM as
   *		noted by the constant PAGE_SIZE.
   *
   ******************************************************************************/
   int EepromWriteData(u16 ByteCount)
   {
   	int Status;

   	/*
   	 * Send the Data.
   	 */
   	Status = XIicPs_MasterSendPolled(&IicInstance, WriteBuffer,
   					  ByteCount, IIC_SLAVE_ADDR);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Wait until bus is idle to start another transfer.
   	 */
   	while (XIicPs_BusIsBusy(&IicInstance));

   	/*
   	 * Wait for a bit of time to allow the programming to complete
   	 */
   	usleep(250000);

   	return XST_SUCCESS;
   }

   /*****************************************************************************/
   /**
   * This function reads data from the IIC serial EEPROM into a specified buffer.
   *
   * @param	BufferPtr contains the address of the data buffer to be filled.
   * @param	ByteCount contains the number of bytes in the buffer to be read.
   *
   * @return	XST_SUCCESS if successful else XST_FAILURE.
   *
   * @note		None.
   *
   ******************************************************************************/
   int EepromReadData(u8 *BufferPtr, u16 ByteCount)
   {
   	int Status;
   	AddressType Address = EEPROM_START_ADDRESS;

   	/*
   	 * Position the Pointer in EEPROM.
   	 */
   	if (sizeof(Address) == 1) {
   		WriteBuffer[0] = (u8) (Address);
   	}
   	else {
   		WriteBuffer[0] = (u8) (Address >> 8);
   		WriteBuffer[1] = (u8) (Address);
   	}

   	Status = EepromWriteData(sizeof(Address));
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Receive the Data.
   	 */
   	Status = XIicPs_MasterRecvPolled(&IicInstance, BufferPtr,
   					  ByteCount, IIC_SLAVE_ADDR);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Wait until bus is idle to start another transfer.
   	 */
   	while (XIicPs_BusIsBusy(&IicInstance));

   	return XST_SUCCESS;
   }

   /*****************************************************************************/
   /**
   * This function initializes the IIC MUX to select EEPROM.
   *
   * @param	None.
   *
   * @return	XST_SUCCESS if pass, otherwise XST_FAILURE.
   *
   * @note		None.
   *
   ****************************************************************************/
   int MuxInit(void)
   {
   	u8 WriteBuffer;
   	u8 MuxIicAddr = IIC_MUX_ADDRESS;
   	u8 Buffer = 0;
   	int Status = 0;

   	/*
   	 * Channel select value for EEPROM.
   	 */
   	WriteBuffer = 0x04;

   	/*
   	 * Send the Data.
   	 */
   	Status = XIicPs_MasterSendPolled(&IicInstance, &WriteBuffer,1,
   					MuxIicAddr);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Wait until bus is idle to start another transfer.
   	 */
   	while (XIicPs_BusIsBusy(&IicInstance));

   	/*
   	 * Receive the Data.
   	 */
   	Status = XIicPs_MasterRecvPolled(&IicInstance, &Buffer,1, MuxIicAddr);
   	if (Status != XST_SUCCESS) {
   		return XST_FAILURE;
   	}

   	/*
   	 * Wait until bus is idle to start another transfer.
   	 */
   	while (XIicPs_BusIsBusy(&IicInstance));

   	return XST_SUCCESS;
//   }



  ///////////////////////////////////////////////////////7

//   int main2()
//   {
      static XScuGic intc;
      static XUartPs ps7_uart_0;
      Xil_ICacheEnable();
      Xil_DCacheEnable();


      {
      int Status;

     // INIZIALIZZAZIONE AD9628
     print("Inizializzazione AD 9628 : ");
     Status = SpiPs_Init_SPI(XPAR_PS7_SPI_1_DEVICE_ID);
     if (Status == 0) { print("OK from SPI..."); }  else { print("SPI FAILED"); }
     print("\r\n");
      }

//accendi led
unsigned int *led;
led = 0x41200000;
*led = 0xFFFFFFFF;


// test dei registri
//scrittura
/*     unsigned int *brama;
          brama = 0x40010000;
          int z;

printf( "Scrivo BRam su porta A ind. %X\r\n",brama);
     for ( z = 0; z < 4097; z++)
          {
            *brama = 0x0AAA0CCC;
         //   *brama = z;
         	 brama = brama + 1;
         }

*/
// Lettura continua canali ADC0 e ADC1
unsigned int *buffer1, *buffer2;
buffer1 = 0x40000000;
buffer2 = 0x40010000;
int ADC0A,ADC0B,ADC1A,ADC1B;

		while(1)
		{
       ADC0A = *buffer1;
       ADC0B = *buffer1&0x1fff;
       ADC1A = *buffer2;
       ADC1B = *buffer2&0x1fff;
       printf( "CH0=%X | CH1=%X  || CH0=%X | CH1=%X  ||\r\n",ADC0A>>16, ADC0B, ADC1A>>16, ADC1B);
       }


/*
// Lettura BRAM canali ADC0 e ADC1
unsigned int *buffer1, *buffer2;
buffer1 = 0x40000000;
buffer2 = 0x40010000;
int w,ADC0A,ADC0B,ADC1A,ADC1B;
printf( "-----   READ BRAM ADC0 and ADC1   -----\r\n\r");
//printf( "addr |         ADC0        ||       ADC1        |\r\n");
printf( "      ADC0       ||       ADC1        |\r\n");

for ( w = 0; w < 1096; w++)
       {
       ADC0A = *buffer1;
       ADC0B = *buffer1&0x1fff;
       ADC1A = *buffer2;
       ADC1B = *buffer2&0x1fff;
//       printf( "  %X =  CH0=%X | CH1=%X  || CH0=%X | CH1=%X  ||\r\n",w, ADC0A>>16, ADC0B, ADC1A>>16, ADC1B);
       printf( "CH0=%X | CH1=%X  || CH0=%X | CH1=%X  ||\r\n",ADC0A>>16, ADC0B, ADC1A>>16, ADC1B);
       buffer1 = buffer1 + 1;
       buffer2 = buffer2 + 1;
       }

*/
/*

//lettura BRAM ADC0
unsigned int *bramb;
          bramb = 0x40000000;
          int w,chanA,chanB;;
printf( "       ----- READ BRAM ADC0 -----\r\n\r\n");
//printf( "     addr -- CHA-CHB\r\n");
     for ( w = 0; w < 15; w++)
               {
    	 	 	 chanA = *bramb;
    	         chanB = *bramb&0x1fff;
    	         printf( "  %X = chanA %X chanB %X\r\n",bramb, chanA>>16, chanB);
              	 bramb = bramb + 1;
               }

     //lettura BRAM ADC1
     unsigned int *bramc;
               bramc = 0x40010000;
               int v;
     printf( "\r\n       ----- READ BRAM ADC1 -----\r\n\r\n");
          for ( v = 0; v < 15; v++)
                    {
        	         chanA = *bramc;
        	         chanB = *bramc&0x1fff;
                      printf( "  %X = chanA %X chanB %X\r\n",bramc, chanA>>16, chanB);
        	  bramc = bramc + 1;
                    }


unsigned int *registre_adc;
     registre_adc = 0x43c00000;
     int i;

     printf("\r\n Visualizzazione registri interni interfaccia ADC : \r\n");
     for ( i = 0; i < 16; i++)
     {
         printf( "  %X = %X \r\n",registre_adc, *registre_adc);
    	 registre_adc = registre_adc + 1;
     }
//##########################################################################################################

     printf( "Output ADC Channels\r\n ");
     unsigned int *registre_adc0;
          registre_adc0 = 0x43c00000;

         volatile unsigned int a;


     unsigned int *registre_adc1;
          registre_adc1 = 0x43c00004;
          volatile unsigned int b;


     while(1)
     {
    	 a = *registre_adc0;
    	 b = *registre_adc1;

//    	 printf( "%X",a);
    	 printf( "ADC0 = Channel A = %X,  Channel B = %X \r\n",a >>16,a & 0xffff);
//    	 printf( "%X",b);
    	 printf( "ADC1 = Channel A = %X,  Channel B = %X \r\n\r\n",b >>16,b & 0xffff);

    	 for( i = 0; i<50000000;i++)
    	 {
    		 registre_adc = 0x43C00000;
    	 }
     }

*/
     *led = 0x00000000;
   print("---Exiting main---\n\r");
   Xil_DCacheDisable();
   Xil_ICacheDisable();
   return 0;
}
